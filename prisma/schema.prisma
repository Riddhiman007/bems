datasource db {
  provider = "mongodb"

  url = env("MONGODB_URI")
}

generator client {
  provider = "prisma-client-js"
}

// generator zod {
//  provider         = "npx zod-prisma-types"
//  output           = "../app/lib/prisma/schemas"
//  useMultipleFiles = true
//  writeBarrelFiles = true
//  createInputTypes = true
// }

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? //@db.Text
  access_token      String? //@db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  fullname      String
  email         String    @unique
  emailVerified DateTime?
  role          Role      @default(Student)
  image         String?
  address       String
  gender        Gender    @default(Female)
  student       Student?
  teacher       Teacher?
  posts         Post[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime @map("expiresAt")

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Grade {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  grade         GradeType @unique /// @zod.enum({required_error:"Which class do you want to study?"})
  class_teacher Teacher   @relation(fields: [teacher_name], references: [id], onDelete: NoAction)
  teacher_name  String    @unique @db.ObjectId

  students Student[]

  @@map("grades")
}

model Teacher {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  email String @unique
  class Grade?
  User  User   @relation(fields: [email], references: [email], onDelete: Cascade)

  @@map("teachers")
}

model Student {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId /// @zod.custom.omit([model, input])
  fullname    String /// @zod.string({required_error:"We don't know what is your name"})
  father_name String /// @zod.string({required_error:"Who is your father?"})
  mother_name String /// @zod.string({required_error:"Who is your mother?"})
  contact     String /// @zod.custom.use(z.string({required_error:"Please enter your contact number."}).length(10,{message:"Contact numbers must be 10 digits long."}))
  caste       Caste     @default(Gen)
  address     String /// @zod.string({required_error:"Can you please tell us where do you live?"})
  isNew       Boolean /// @zod.custom.omit([model, input])
  gender      Gender    @default(Male) /// @zod.enum({required_error:"Are you a boy or a girl?"})
  email       String    @unique /// @zod.string({required_error:"Can you please enter your email address?"})
  grade       Grade     @relation(fields: [grade_name], references: [grade], onDelete: NoAction)
  grade_name  GradeType @unique
  user        User      @relation(fields: [email], references: [email], onDelete: Cascade)

  @@map("students")
}

model Post {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  content     String
  author      User   @relation(fields: [author_id], references: [id], onDelete: NoAction)
  author_id   String @db.ObjectId

  @@map("posts")
}

enum Role {
  Student
  Teacher
  Admin
}

enum GradeType {
  nursery
  jr
  sr
  I
  II
  III
  IV
  V
  VI
  VII
  VIII
  IX
  X
}

enum Gender {
  Male
  Female
}

enum Caste {
  Gen
  SC
  ST
  OBC
  NT
}
