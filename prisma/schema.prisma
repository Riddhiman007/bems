datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

generator client {
  provider = "prisma-client-js"
}

// generator zod {
//  provider         = "npx zod-prisma-types"
//  output           = "../app/lib/prisma/schemas"
//  useMultipleFiles = true
//  writeBarrelFiles = true
//  createInputTypes = true
// }

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? //@db.Text
  access_token      String? //@db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  fullname      String
  email         String        @unique
  emailVerified DateTime?
  role          Role          @default(Student)
  image         String?
  address       String
  gender        Gender        @default(Female)
  contact       String
  student       Student?
  teacher       Teacher?
  posts         Post[]
  accounts      Account[]
  sessions      Session[]
  StarredPost   StarredPost[] @relation("StarredPost")
  Comment       Comment[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime @map("expiresAt")

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Grade {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  grade         GradeType @unique /// @zod.enum({required_error:"Which class do you want to study?"})
  class_teacher Teacher   @relation(fields: [teacher_name], references: [id], onDelete: NoAction)
  teacher_name  String    @unique @db.ObjectId

  students                    Student[]
  SubjectTaughtByInWhichGrade SubjectTaughtByInWhichGrade[]
  GradeExamRel                GradeExamRel[]

  @@map("grades")
}

model Teacher {
  id                          String                        @id @default(auto()) @map("_id") @db.ObjectId
  name                        String
  email                       String                        @unique
  class                       Grade?
  User                        User                          @relation(fields: [email], references: [email], onDelete: Cascade)
  SubjectTaughtByInWhichGrade SubjectTaughtByInWhichGrade[]

  @@map("teachers")
}

model SubjectTaughtByInWhichGrade {
  id             String             @id @default(auto()) @map("_id") @db.ObjectId
  subjects       SubjectList[]
  exam_Subjects  ExamSubjectsList[]
  grade          Grade              @relation(fields: [gradeId], references: [grade])
  gradeId        GradeType
  subjectTeacher Teacher            @relation(fields: [teacherId], references: [id])
  teacherId      String             @db.ObjectId

  @@unique([subjects, gradeId, teacherId])
}

model ExamRecord {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        Student  @relation(fields: [studentId], references: [id])
  studentId   String   @db.ObjectId
  examType    ExamType
  English     Int      @default(0)
  Hindi       Int      @default(0)
  Mathematics Int      @default(0)
  Science     Int      @default(0)
  SST         Int      @default(0)
  Marathi     Int      @default(0)
  Computer    Int      @default(0)
  totalMarks  Int      @default(0)
  percentage  Float    @default(0.0)
  isComplete  Boolean  @default(false)
  Exam        Exam     @relation(fields: [examType], references: [type])

  @@unique([studentId, examType])
}

model Exam {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  type         ExamType       @unique
  records      ExamRecord[]
  GradeExamRel GradeExamRel[]
  isComplete   Boolean        @default(false)
}

model GradeExamRel {
  id                   String    @id @default(auto()) @map("_id") @db.ObjectId
  grade                Grade     @relation(fields: [gradeId], references: [grade])
  gradeId              GradeType
  exam_type            Exam      @relation(fields: [examId], references: [id])
  examId               String    @db.ObjectId
  MainSubjectMarks     Int       @default(0)
  OptionalSubjectMarks Int       @default(0)
}

model Student {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId /// @zod.custom.omit([model, input])
  fullname    String /// @zod.string({required_error:"We don't know what is your name"})
  father_name String /// @zod.string({required_error:"Who is your father?"})
  mother_name String /// @zod.string({required_error:"Who is your mother?"})
  caste       Caste        @default(Gen)
  isNew       Boolean /// @zod.custom.omit([model, input])
  grade       Grade        @relation(fields: [grade_name], references: [grade], onDelete: NoAction)
  grade_name  GradeType
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String       @unique @db.ObjectId
  examRecords ExamRecord[]

  @@map("students")
}

model StarredPost {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  starredPost  Post   @relation("StarredPost", fields: [postId], references: [id])
  postId       String @db.ObjectId
  starringUser User   @relation("StarredPost", fields: [userId], references: [id])
  userId       String @db.ObjectId

  @@unique([postId, userId])
}

model Post {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  desc        String?
  category    String
  subCategory String
  content     Json
  author      User          @relation(fields: [author_id], references: [id], onDelete: NoAction)
  author_id   String        @db.ObjectId
  StarredPost StarredPost[] @relation("StarredPost")
  Comment     Comment[]
  postedOn    DateTime      @default(now())

  @@map("posts")
}

model Comment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  post        Post     @relation(fields: [postId], references: [id])
  postId      String   @db.ObjectId
  content     Json
  commentedOn DateTime @default(now())

  @@map("comments")
}

enum Role {
  Student
  Teacher
  Admin
}

enum GradeType {
  nursery
  jr
  sr
  I
  II
  III
  IV
  V
  VI
  VII
  VIII
  IX
  X
}

enum Gender {
  Male
  Female
}

enum Caste {
  Gen
  SC
  ST
  OBC
  NT
}

enum SubjectList {
  English
  Hindi
  Marathi
  Algebra
  Geometry
  Physics
  Chemistry
  Biology
  History
  Civics
  Geography
  Economics
}

enum ExamSubjectsList {
  English
  Hindi
  Marathi
  SST
  Science
  Mathematics
  Computer
}

enum ExamType {
  FA1
  SA1
  FA2
  SA2
  Prelim1
  Prelim2
  Board
}

enum ExamGrades5Bit {
  A
  B
  C
  D
  E
}

enum ExamGrades8Bit {
  A1
  A2
  B1
  B2
  C1
  C2
  D
  E
}
