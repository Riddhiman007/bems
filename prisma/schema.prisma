datasource db {
  provider = "mongodb"

  url = env("MONGODB_URI")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? //@db.Text
  access_token      String? //@db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  firstname     String // @db.Text
  middlename    String?
  lastname      String
  email         String
  emailVerified DateTime?
  role          String
  image         String?
  username      String
  student       Student?
  teacher       Teacher?
  posts         Post[]
  accounts      Account[]
  sessions      Session[]
  teacherId     String?   @db.ObjectId

  @@unique([email, username])
  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime @map("expiresAt")

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Grade {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  grade         String  @unique
  class_teacher Teacher @relation(fields: [teacher_name], references: [username], onDelete: NoAction)
  teacher_name  String  @unique

  students Student[]

  @@map("grades")
}

model Teacher {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  username String @unique
  email    String
  class    Grade?
  User     User   @relation(fields: [username, email], references: [username, email], onDelete: Cascade)

  @@unique([username, email])
  @@map("teachers")
}

model Student {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  firstname   String
  middlename  String?
  lastname    String
  username    String
  father_name String
  mother_name String
  caste       String
  email       String
  grade       Grade   @relation(fields: [grade_name], references: [grade], onDelete: NoAction)
  grade_name  String  @unique
  user        User    @relation(fields: [username, email], references: [username, email], onDelete: Cascade)

  @@unique([username, email])
  @@map("students")
}

model Post {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  content     String
  author      User   @relation(fields: [author_id], references: [id], onDelete: NoAction)
  author_id   String @db.ObjectId

  @@map("posts")
}
